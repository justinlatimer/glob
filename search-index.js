var searchIndex = {};
searchIndex['glob'] = {"items":[[0,"","glob","Support for matching file paths against Unix shell style patterns."],[3,"Paths","","An iterator that yields `Path`s from the filesystem that match a particular\npattern."],[3,"GlobError","","A glob iteration error."],[3,"PatternError","","A pattern parsing error."],[12,"pos","","The approximate character index of where the error occurred.",0],[12,"msg","","A message describing the error.",0],[3,"Pattern","","A compiled Unix shell style pattern."],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`"],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner.\nThis currently only considers upper/lower case relationships between\nASCII characters, but in future this might be extended to work with\nUnicode.",1],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on\nPosix) must be matched by a literal `/`, rather than by `*` or `?` or\n`[...]`",1],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.`\nwill not match unless the `.` appears literally in the pattern: `*`, `?`\nor `[...]` will not match. This is useful because such files are\nconventionally considered hidden on Unix systems and it might be\ndesirable to skip them when listing files.",1],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory."],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory."],[6,"GlobResult","","An alias for a glob iteration result."],[11,"fmt","","",2],[11,"path","","The Path that the error corresponds to.",2],[11,"error","","The error in question.",2],[11,"fmt","","",2],[6,"Item","",""],[11,"next","","",3],[11,"fmt","","",0],[11,"fmt","","",0],[11,"fmt","","",4],[11,"default","","",4],[11,"hash","","",4],[11,"cmp","","",4],[11,"partial_cmp","","",4],[11,"lt","","",4],[11,"le","","",4],[11,"gt","","",4],[11,"ge","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[11,"new","","This function compiles Unix shell style patterns.",4],[11,"escape","","Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",4],[11,"matches","","Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",4],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the default match options (i.e. `MatchOptions::new()`).",4],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified\nmatch options.",4],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the specified match options.",4],[11,"as_str","","Access the original glob pattern.",4],[11,"default","","",1],[11,"hash","","",1],[11,"cmp","","",1],[11,"partial_cmp","","",1],[11,"lt","","",1],[11,"le","","",1],[11,"gt","","",1],[11,"ge","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions`\nparameter.",1]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
initSearch(searchIndex);
